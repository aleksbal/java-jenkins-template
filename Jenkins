/*
    Description:

    - build:            mvn clean package
    - test:             mvn test
    - Build image:      mvn clean package spring-boot:build-image
    - Push image:       pushes the image into artifactory
*/

pipeline {

    agent {
         docker {
            image 'artifactory.dxc.com/kontenabruf-docker/build/maven-extended:3.8.4-openjdk-17_v4'
            registryUrl 'https://artifactory.examples.org/platform'
            registryCredentialsId 'microserviceCreds'
            args '-v $WORKSPACE:/tmp/sbapp -v /var/run/docker.sock:/var/run/docker.sock -u="root" -w /tmp/sbapp --cap-add=NET_ADMIN --device /dev/net/tun:/dev/net/tun'
          reuseNode true
        }
    }

    environment {

        // SONAR
        SONAR_URL = "https://someurl.here.org"
        SONAR_API_KEY = credentials("sonar_api_key")

        // ARTIFACTORY
        ARTIFACTORY_URL = 'https://artifactory.examples.org/artifactory'
        ARTIFACTORY_API_KEY = credentials('artifactory_api_key')
        REPOSITORY = 'platform'
        GROUP_PATH = 'org/examples'
    }

    stages {

        // Maven clean package
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
                sh 'docker --version'
                sh 'curl --version'
            }
        }

        // Running tests via maven
	      stage('Test') {
            steps {
                sh 'mvn test'
                sh 'mvn surefire-report:report'
            }
            post {
                  always {
                  sh 'echo save unit test results'
                  junit '**/target/surefire-reports/TEST-*.xml'
                }
            }
        }

        // build image via maven
        stage('Build SPB Image') {
            steps {
                sh 'mvn clean verify spring-boot:build-image'
            }
        }

        // static code analysis using sonarqube
        stage('SonarQube Analysis') {
            steps {
                sh """
                mvn sonar:sonar \
                    -Pcoverage \
                    -Dsonar.projectKey=com.dxc.appl:kwg-abfrage \
                    -Dsonar.host.url=$SONAR_URL \
                    -Dsonar.login=$SONAR_API_KEY
                """
            }
        }

        stage('Push to Artifactory') {
            steps {
                script {
                    // Read the version from pom.xml
                    def pom = readMavenPom file: 'pom.xml'
                    def version = pom.version
                    def artifactId = pom.artifactId

                    def artifactPath = "${ARTIFACTORY_URL}/${REPOSITORY}/${GROUP_PATH}/${artifactId}/${version}/${artifactId}-${version}.jar"

                    sh """
                      set -e  # Exit immediately if a command fails

                      # Attempt to upload the artifact to Artifactory
                      if ! curl --fail -H "X-JFrog-Art-Api: ${ARTIFACTORY_API_KEY}" \
                                -T "target/${artifactId}-${version}.jar" \
                                ${artifactPath}; then
                          echo "ERROR: Failed to upload artifact to Artifactory." >&2
                          exit 1
                      fi

                      echo "Artifact successfully uploaded to Artifactory: ${artifactPath}"
                    """
                }
            }
        }
    }
}

