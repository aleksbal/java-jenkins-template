/*
    Description:

    - build:            mvn clean package
    - test:             mvn test
    - Build image:      mvn clean package spring-boot:build-image
    - Push image:       pushes the image into artifactory
*/


def selectedArtifact=""
def selectedVersion="0.0.0"

pipeline {

    agent {
         docker {
            image 'artifactory.dxc.com/kontenabruf-docker/build/maven-extended:3.8.4-openjdk-17_v4'
            registryUrl 'https://artifactory.examples.org/platform'
            registryCredentialsId 'microserviceCreds'
            args '-v $WORKSPACE:/tmp/sbapp -v /var/run/docker.sock:/var/run/docker.sock -u="root" -w /tmp/sbapp --cap-add=NET_ADMIN --device /dev/net/tun:/dev/net/tun'
          reuseNode true
        }
    }

    environment {

        // SONAR
        SONAR_URL = "https://someurl.here.org"
        SONAR_API_KEY = credentials("sonar_api_key")

        // ARTIFACTORY
        ARTIFACTORY_URL = 'https://artifactory.examples.org/artifactory'
        ARTIFACTORY_API_KEY = credentials('artifactory_api_key')
        REPOSITORY = 'platform'
        GROUP_PATH = 'org/examples'

        // OPEN VPN
        VPN_CONFIG_FILE = credentials('openvpn_config')
        SSH_KEY = credentials('open_ssh')

        // AWS
        REMOTE_SERVER = 'ec2-user@10.0.0.1'
        REMOTE_DIR = '/opt/kwg-abfrage'
    }

    stages {

        // Maven clean package
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
                sh 'docker --version'
                sh 'curl --version'
            }
        }

        // Running tests via maven
	      stage('Test') {
            steps {
                sh 'mvn test'
                sh 'mvn surefire-report:report'
            }
            post {
                  always {
                  sh 'echo save unit test results'
                  junit '**/target/surefire-reports/TEST-*.xml'
                }
            }
        }

        // build image via maven
        stage('Build SPB Image') {
            steps {
                sh 'mvn clean verify spring-boot:build-image'
            }
        }

        // static code analysis using sonarqube
        stage('SonarQube Analysis') {
            steps {
                sh """
                mvn sonar:sonar \
                    -Pcoverage \
                    -Dsonar.projectKey=com.dxc.appl:kwg-abfrage \
                    -Dsonar.host.url=$SONAR_URL \
                    -Dsonar.login=$SONAR_API_KEY
                """
            }
        }

        stage('Push to Artifactory') {
            steps {
                script {
                    // Read the version from pom.xml
                    def pom = readMavenPom file: 'pom.xml'
                    def version = pom.version
                    def artifactId = pom.artifactId

                    def artifactPath = "${ARTIFACTORY_URL}/${REPOSITORY}/${GROUP_PATH}/${artifactId}/${version}/${artifactId}-${version}.jar"

                    sh """
                      set -e  # Exit immediately if a command fails

                      # Attempt to upload the artifact to Artifactory
                      if ! curl --fail -H "X-JFrog-Art-Api: ${ARTIFACTORY_API_KEY}" \
                                -T "target/${artifactId}-${version}.jar" \
                                ${artifactPath}; then
                          echo "ERROR: Failed to upload artifact to Artifactory." >&2
                          exit 1
                      fi

                      echo "Artifact successfully uploaded to Artifactory: ${artifactPath}"
                    """
                }
            }
        }

        stage('Fetch Artifacts') {
            steps {
                script {

                    def artifactoryUrl = "${ARTIFACTORY_URL}/api/storage/${REPOSITORY}/${GROUP_PATH}";

                    def artifacts = sh(
                        script: """
                          curl -s -H "X-JFrog-Art-Api: ${ARTIFACTORY_API_KEY}" \
                          ${ARTIFACTORY_URL}/api/storage/${REPOSITORY}/${GROUP_PATH} \
                          | grep '"uri"' \
                          | grep -v '"uri" : "http' \
                          | grep -Eo '/[^/"]+' \
                          | sed 's|^/||'
                        """,
                        returnStdout: true
                    ).trim()

                    echo "Response from artifactory: ${artifacts}"

                    // Save versions to a file
                    writeFile file: 'artifacts.txt', text: artifacts
                }
            }
        }

        stage('Select Artifact for Deployment') {
            steps {
                script {
                    selectedArtefact = input(
                        message: 'Select an artifact',
                        parameters: [
                            choice(
                                name: 'ARTIFACT',
                                choices: readFile('artifacts.txt').trim(),
                                description: 'Select the artifact to deploy'
                            )
                        ]
                    )
                    echo "Selected artifact: ${selectedArtefact}"
                }
            }
        }

        stage('Fetch Versions') {
            steps {
                script {

                    def artifactId = selectedArtefact

                    def artifactoryUrl = "${ARTIFACTORY_URL}/api/storage/${REPOSITORY}/${GROUP_PATH}/${artifactId}";

                    def versions = sh(
                        script: """
                          curl -s -H "X-JFrog-Art-Api: ${ARTIFACTORY_API_KEY}" \
                          ${artifactoryUrl} \
                          | grep '"uri"' \
                          | grep -Eo '/[0-9]+\\.[0-9]+\\.[0-9]+' \
                          | sed 's|^/||'
                        """,
                        returnStdout: true
                    ).trim()

                    // Save versions to a file
                    writeFile file: 'versions.txt', text: versions
                }
            }
        }

        stage('Select Version for Deployment') {
            steps {
                script {
                    selectedVersion = input(
                        message: 'Select a version',
                        parameters: [
                            choice(
                                name: 'VERSION',
                                choices: readFile('versions.txt').trim(),
                                description: 'Select the version to deploy'
                            )
                        ]
                    )
                    echo "Selected version: ${selectedVersion}"
                }
            }
        }

        stage('Pull from Artifactory') {
            steps {
                script {

                    def version = selectedVersion
                    def artifactId = selectedArtefact

                    def downloadUrl = "${ARTIFACTORY_URL}/${REPOSITORY}/${GROUP_PATH}/${artifactId}/${version}/${artifactId}-${version}.jar"
                    sh """
                    echo "Downloading artifact from Artifactory: ${downloadUrl}"
                    curl -H "X-JFrog-Art-Api: ${ARTIFACTORY_API_KEY}" \
                         -o ${artifactId}-${version}.jar \
                         ${downloadUrl}

                    echo "Artifact downloaded: ${artifactId}-${version}.jar"
                    """
                }
            }
        }

        stage('Establish VPN Connection') {
            steps {
                script {
                    echo "Establishing VPN connection using configuration file: ${VPN_CONFIG_FILE}..."

                    sh """
                      set -e

                      # Start VPN connection in daemon mode
                      openvpn --config ${VPN_CONFIG_FILE} --daemon --log /tmp/openvpn.log

                      # Wait for VPN to establish and verify connectivity
                      for i in {1..3}; do
                          echo "Waiting for VPN to establish... Attempt \$i"
                          sleep 5
                          if ping -c 1 10.0.30.147 > /dev/null 2>&1; then
                              echo "VPN connection successfully established!"
                              exit 0
                          fi
                      done

                      echo "ERROR: VPN connection could not be established after 3 attempts."
                      exit 1
                    """
                }
            }
        }

       stage('Deploy to Server') {
           steps {
               script {

                  def version = selectedVersion
                  def artifactId = selectedArtefact

                  // Transfer the JAR file to the remote server
                  sh "sudo scp -v -o StrictHostKeyChecking=no -i ${SSH_KEY} ${artifactId}-${version}.jar ${REMOTE_SERVER}:/opt/${artifactId}/latest/"

                  // Execute commands safely inside SSH
                  sh """
                     sudo ssh -i ${SSH_KEY} ${REMOTE_SERVER} << EOF
                         set -e  # Stop execution on any failure
                         sudo mkdir -p /opt/${artifactId}/latest
                         sudo mkdir -p /opt/${artifactId}/current

                         # Create a new symlink with a temporary name
                         sudo ln -sfn /opt/${artifactId}/latest/${artifactId}-${version}.jar /opt/${artifactId}/current/${artifactId}.jar.new

                         # Atomically replace the old symlink with the new one
                         sudo mv -f /opt/${artifactId}/current/${artifactId}.jar.new /opt/${artifactId}/current/${artifactId}.jar

                         # Verify the symlink before restarting the service
                         ls -l /opt/${artifactId}/current/${artifactId}.jar

                         # Restart the service only if the new symlink exists
                         if [ -L /opt/${artifactId}/current/${artifactId}.jar ]; then
                             sudo systemctl restart ${artifactId}
                         else
                             echo "ERROR: Symlink replacement failed!" >&2
                             exit 1
                         fi
EOF
                  """
                }
            }
        }
    }

    post {
        always {
            // Ensure VPN is stopped even if the build fails
            script {
                sh 'sudo killall openvpn || true'
            }
        }
    }
}

